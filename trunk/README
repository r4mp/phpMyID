phpMyID - A standalone, single user, OpenID Identity Provider

by: CJ Niemira <siege (at) siege (dot) org>
(c) 2006-2007
http://siege.org/projects/phpMyID


phpMyID is a small, fairly lightweight, standalone, single user Identity
Provider for OpenID authentication. It comprises a single PHP script that can be
used by one individual to run their own personal OpenID "IdP."

This program requires no external libraries, and has very minimal requirements.
It should run on any PHP server (v4.2+), and as long as it built without
intentionally disabling the bcmath functions, it should support 'Smart Mode.'
This program caches all data using built-in PHP session handling, so it requires
no database, and no explicit write access to the file system.

NOTE: The name 'phpMy...' does NOT indicate that MySQL or any other database is
      required. This software does not use a backend database by design!

User authentication is done using HTTP Digest authentication, so your password
is never transmitted over the wire in plain text.

NOTE: There's no reason that phpMyID should not work under IIS. However, getting
      HTTP Digest authentication to work properly may require jumping through
      some hoops. Please see here: http://php.net/http-auth


FOR MORE INFORMATION ON OpenID, PLEASE SEE http://openid.net


************
INSTALLATION
************

phpMyID can be installed on just about any PHP server. It is recommended that
you use a server that you own and control.


1) Decide how you want to install phpMyID. It requires at least two files, and
   can be installed in a number of ways. The two files you will be uploading
   are:

   MyID.php - The application library. You can rename it if you like.
   MyID.config.php - This is the file you'll be visiting in your browser.
                     It will also contain your user profile.

   Three suggestions for installation are:

   a) Don't bother renaming the files because there's no reason to
   b) Rename MyID.config.php to index.php and plan to put them in a new
      directory
   c) Rename 'em both. Like, change MyID.config.php to whatevermakesyouhappy.php
      and MyID.php to somethingjustassilly.php. This option is kinda like a
      vanity license plate... pointless, but if it makes you happy, go nuts.


2) Upload the files. That's right, just upload 'em. Unless you decided you need
   to rename MyID.php, you shouldn't have edited them yet. Put 'em wherever you
   want. I suggest your root URL, but you can do whatever you want to make them
   web accessable, as long as you can figure out what the URL should be.

   If you did rename MyID.php, then you must change the last line of whatever
   your config file is now called to reflect the new name so that it's included
   correctly.


3) Visit your config file (the one that used to be MyID.config.php - 'cause I
   know you just had to rename it) in a web browser. You should see a message
   that says "This is an OpenID server endpoint." You should also see a
   "Server" URL, and a "Realm" string.

   If you don't see all of these things, proceed to the Troubleshooting section
   of this document.


4) If your "Realm" is anything other than the string 'phpMyID' (like say, if it
   has a number after it) then make note of the value. This means that PHP is
   running in "safe mode," and while I disagree for the reasons they change the
   realm, there's nothing I can do about it.

   Edit your config file, and change the key "auth_realm" to reflect the "Realm"
   value displayed in your browser.

   If you're going to want to change this to some custom value (again, pointless
   to do so, but if it makes you happy, you can) just edit the "auth_realm" key
   to read whatever you want, but remember to append the number after "phpMyID"
   (including the hyphen) in the default "Realm" (if there is one).


5) Now you get to decide your login name and password. This is what you will use
   to authenticate yourself to phpMyID. Your login name can be anything you
   like.

   To create your password, you will need an MD5 hashing utility. If you are a
   Linux or OSX user, you can use openssl. Simply open a terminal and type:

    $ echo -n 'username:realm:password' | openssl md5

   If you are a Windows user, and do not already have an MD5 hashing tool, one
   is available at http://siege.org/projects/phpMyID . To use it, download
   the exe, and open a cmd session. Use it as follows:

    C:\Documents and Settings\cniemira>cd Desktop
    C:\Documents and Settings\cniemira\Desktop>md5.exe -d"username:realm:password"

   In either case, make sure to substitute your username and password where
   indicated. You must also substitute "realm" for your authentication realm as
   determined in step 4. The resulting output, which will be a long alphanumeric
   string, is your Digest password that can be entered into the 'auth_password'
   field where indicated below.

   Note that the default username and password are both "test," and were encoded
   with the realm "phpMyID".


6) Upload your config file again, replacing the one that was already there.

   Visit your config file in a browser again, or refresh the current page. The
   output shouldn't change, you're just looking to be sure there are no errors.

   Be certain that the 'Realm' listed exactly matches the value you used when
   you created your password hash in step 5.

   Click 'Login' - you should be redirected a couple of times and then presented
   with a login dialogue box. Enter your username and password and click ok.
   Again, you should be bounced around for a sec, then get a message which says
   you're logged in as whoever your username is.

   If you can't log in, if you get an error, or if doesn't work in some other
   way, proceed to the Troubleshooting section.


7) The "Server" URL, is your Identity Provider. This is this URL you must link
   as your openid.server and openid.delegate.

   The preferred way of setting this up is to determine the URL you wish to
   authenticate as (for example "http://siege.org", in my case), and add the
   following to the HTML <head> section for that document:

    <link rel="openid.server" href="http://siege.org/MyID.config.php">
    <link rel="openid.delegate" href="http://siege.org/MyID.config.php">

   Remember, BOTH the openid.sever and openid.delegate values should be set to
   the same thing.

   You may now use your URL with OpenID (again, "http://siege.org" in my case).



#####
USAGE
#####

There isn't much to using phpMyID other than pointing at it, and logging in.
If you wish, you can log out by visiting:

  http://yourdomain.com/path/to/MyID.php?openid.mode=logout

There is also a 'log in' mode that will prompt you for credentials without
having to be referred from a client site.

 http://yourdomain.com/path/to/MyID.php?openid.mode=login


TROUBLESHOOTING

*) Received error: "Missing expected authorization header."

   phpMyID must be able to read http request headers which are only available if
   PHP is running as a webserver module. If you are using PHP in CGI mode, you
   must convert the HTTP 'Authorization' header into an environment variable
   ("PHP_AUTH_DIGEST") or query parameter ("auth") that can then be used to
   perform the authorization.

   If you are using Apache, the included 'htaccess' file contains three examples
   of how you can use mod_rewrite or mod_setenvif directives to to set the
   necessary variable. If you need to use this technique, it is recommended
   that you place phpMyID in its own directory, isolated from the rest of your
   web site.


*) Turning on the Debug Log

   phpMyID has a built-in debug function that will log information about what it
   is attempting to do. You can activate this by adding 'debug' to your profile
   array.

    $profile['debug'] = true;

   The default location of the debug log is 'phpMyID.debug.log' in your temp dir
   as discovered by sys_get_temp_dir. If the system temp dir cannot be
   automatically discovered, phpMyID will attempt to use its own base directory.
   This will almost certainly fail and generate an error message. Visiting the
   script URL directly should indicate the problem.

   You can specify the location of the log file by setting 'logfile' in your
   profile array:

    $profile['logfile'] = '/var/tmp/phpMyID.debug.log';


*) Login never works? Double check your authentication realm

   Digest authentication can be a bit tricky to set up properly. One of the
   biggest stumbling blocks has to do with the authentication realm as described
   under installation step 1. If you change servers or if any settings on your
   server changes, it is possible that your authentication realm will change as
   well. If that happens, you will no longer be able to authenticate to phpMyID,
   and must re-create your password hash.

   When you log in to phpMyID, your web browser will present the authentication
   realm to you in the login box it pops up. It will say something like this:

    Enter username and password for "phpMyID-101" at http://siege.org

  The quoted value in the above is your authentication realm. Make sure that is
  the same value you used when you created your password hash.


*) Login still broken? Try re-encoding the test values.

   Sometimes different computers, using different character sets, will produce
   different md5 values. Try generating an MD5 hash for "test:phpMyID:test"
   (no quotes). If the value you get back isn't this:

	37fa04faebe5249023ed1f6cc867329b

   then you may have a character set problem. The quick solution for this is
   to have your webserver do the hashing for you. It's not the most secure
   option in the world, but you can create a temporary php file containing
   the following:

	<?php
	echo md5("user:realm:pass");
	?>

   Then upload it, hit it in your browser, get your hash, and delete it.



###########
OTHER STUFF
###########
Things not to complain about:

MD5) I get a lot of people who think they know something about securiting
   writing to me to complain about my using MD5, or Diffie-Hellman, or
   whatever the heck else for encryption. My answer is "go read the specs."
   I'm not using what I'm using because it's the most secure, I'm using it
   because it's what I have to use.

Multiple Users) Other folks like to complain that phpMyID doesn't support
   multiple users. No kidding... wasn't really meant to. If you want a
   high power, ultra efficient OpenID Server that people can sign up for
   jand useses a memcached and backend database for lightning quick
   transactions... go build your own.

Digest Authentication) Yes, it's a PITA to set up, debug, troubleshoot and
   otherwise deal with... BUT - using digest authentication allows your
   password to be encrypted before it's sent over the Internet. Regular
   HTTP authentication or some form-based thing would send your password
   in plain text.
